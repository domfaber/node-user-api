function cov_wr6iwr5pq(){var path="/Users/dominikfaber/Development/repos/domnode1/models/users.model.js";var hash="ee7ce6faf7660286f8c9dda75910587e92e691c9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/dominikfaber/Development/repos/domnode1/models/users.model.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:2,column:15},end:{line:2,column:32}},"2":{start:{line:3,column:15},end:{line:3,column:32}},"3":{start:{line:4,column:15},end:{line:4,column:30}},"4":{start:{line:7,column:19},end:{line:17,column:2}},"5":{start:{line:21,column:0},end:{line:33,column:3}},"6":{start:{line:23,column:15},end:{line:23,column:19}},"7":{start:{line:26,column:15},end:{line:26,column:51}},"8":{start:{line:28,column:2},end:{line:28,column:23}},"9":{start:{line:30,column:2},end:{line:30,column:9}},"10":{start:{line:32,column:2},end:{line:32,column:9}},"11":{start:{line:35,column:0},end:{line:41,column:1}},"12":{start:{line:36,column:15},end:{line:36,column:19}},"13":{start:{line:39,column:18},end:{line:39,column:63}},"14":{start:{line:40,column:2},end:{line:40,column:17}},"15":{start:{line:43,column:0},end:{line:45,column:2}},"16":{start:{line:44,column:4},end:{line:44,column:37}},"17":{start:{line:48,column:0},end:{line:48,column:58}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:23},end:{line:21,column:24}},loc:{start:{line:21,column:43},end:{line:33,column:1}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:37},end:{line:35,column:38}},loc:{start:{line:35,column:61},end:{line:41,column:1}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:22},end:{line:43,column:23}},loc:{start:{line:43,column:33},end:{line:45,column:1}},line:43}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ee7ce6faf7660286f8c9dda75910587e92e691c9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_wr6iwr5pq=function(){return actualCoverage;};return actualCoverage;}cov_wr6iwr5pq();const mongoose=(cov_wr6iwr5pq().s[0]++,require("mongoose"));const bcrypt=(cov_wr6iwr5pq().s[1]++,require('bcrypt'));const crypto=(cov_wr6iwr5pq().s[2]++,require('crypto'));const Schema=(cov_wr6iwr5pq().s[3]++,mongoose.Schema);const UserSchema=(cov_wr6iwr5pq().s[4]++,new mongoose.Schema({email:{type:String,required:true,unique:true},password:{type:String,required:true}}));cov_wr6iwr5pq().s[5]++;UserSchema.pre('save',async function(next){cov_wr6iwr5pq().f[0]++;//'this' refers to the current document about to be saved
const user=(cov_wr6iwr5pq().s[6]++,this);//Hash the password with a salt round of 10, the higher the rounds the more secure, but the slower
//your application becomes.
const hash=(cov_wr6iwr5pq().s[7]++,await bcrypt.hash(this.password,10));//Replace the plain text password with the hash and then store it
cov_wr6iwr5pq().s[8]++;this.password=hash;//Indicates we're done and moves on to the next middleware
cov_wr6iwr5pq().s[9]++;next();cov_wr6iwr5pq().s[10]++;next();});cov_wr6iwr5pq().s[11]++;UserSchema.methods.isValidPassword=async function(password){cov_wr6iwr5pq().f[1]++;const user=(cov_wr6iwr5pq().s[12]++,this);//Hashes the password sent by the user for login and checks if the hashed password stored in the
//database matches the one sent. Returns true if it does else false.
const compare=(cov_wr6iwr5pq().s[13]++,await bcrypt.compare(password,user.password));cov_wr6iwr5pq().s[14]++;return compare;};cov_wr6iwr5pq().s[15]++;exports.findByEmail=email=>{cov_wr6iwr5pq().f[2]++;cov_wr6iwr5pq().s[16]++;return User.find({email:email});};cov_wr6iwr5pq().s[17]++;module.exports.User=mongoose.model("Users",UserSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLm1vZGVsLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsImJjcnlwdCIsImNyeXB0byIsIlNjaGVtYSIsIlVzZXJTY2hlbWEiLCJlbWFpbCIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsInVuaXF1ZSIsInBhc3N3b3JkIiwicHJlIiwibmV4dCIsInVzZXIiLCJoYXNoIiwibWV0aG9kcyIsImlzVmFsaWRQYXNzd29yZCIsImNvbXBhcmUiLCJleHBvcnRzIiwiZmluZEJ5RW1haWwiLCJVc2VyIiwiZmluZCIsIm1vZHVsZSIsIm1vZGVsIl0sIm1hcHBpbmdzIjoieXVFQUFBLEtBQU1BLENBQUFBLFFBQVEseUJBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVYsQ0FBZCxDQUNBLEtBQU1DLENBQUFBLE1BQU0seUJBQUdELE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBWixDQUNBLEtBQU1FLENBQUFBLE1BQU0seUJBQUdGLE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBWixDQUNBLEtBQU1HLENBQUFBLE1BQU0seUJBQUdKLFFBQVEsQ0FBQ0ksTUFBWixDQUFaLENBR0EsS0FBTUMsQ0FBQUEsVUFBVSx5QkFBRyxHQUFJTCxDQUFBQSxRQUFRLENBQUNJLE1BQWIsQ0FBb0IsQ0FDckNFLEtBQUssQ0FBRyxDQUNOQyxJQUFJLENBQUdDLE1BREQsQ0FFTkMsUUFBUSxDQUFHLElBRkwsQ0FHTkMsTUFBTSxDQUFHLElBSEgsQ0FENkIsQ0FNckNDLFFBQVEsQ0FBRyxDQUNUSixJQUFJLENBQUdDLE1BREUsQ0FFVEMsUUFBUSxDQUFHLElBRkYsQ0FOMEIsQ0FBcEIsQ0FBSCxDQUFoQixDLHVCQWNBSixVQUFVLENBQUNPLEdBQVgsQ0FBZSxNQUFmLENBQXVCLGVBQWVDLElBQWYsQ0FBb0Isd0JBQ3pDO0FBQ0EsS0FBTUMsQ0FBQUEsSUFBSSx5QkFBRyxJQUFILENBQVYsQ0FDQTtBQUNBO0FBQ0EsS0FBTUMsQ0FBQUEsSUFBSSx5QkFBRyxLQUFNYixDQUFBQSxNQUFNLENBQUNhLElBQVAsQ0FBWSxLQUFLSixRQUFqQixDQUEyQixFQUEzQixDQUFULENBQVYsQ0FDQTtBQU55Qyx1QkFPekMsS0FBS0EsUUFBTCxDQUFnQkksSUFBaEIsQ0FDQTtBQVJ5Qyx1QkFTekNGLElBQUksR0FUcUMsd0JBV3pDQSxJQUFJLEdBQ0wsQ0FaRCxFLHdCQWNBUixVQUFVLENBQUNXLE9BQVgsQ0FBbUJDLGVBQW5CLENBQXFDLGVBQWVOLFFBQWYsQ0FBd0Isd0JBQzNELEtBQU1HLENBQUFBLElBQUksMEJBQUcsSUFBSCxDQUFWLENBQ0E7QUFDQTtBQUNBLEtBQU1JLENBQUFBLE9BQU8sMEJBQUcsS0FBTWhCLENBQUFBLE1BQU0sQ0FBQ2dCLE9BQVAsQ0FBZVAsUUFBZixDQUF5QkcsSUFBSSxDQUFDSCxRQUE5QixDQUFULENBQWIsQ0FKMkQsd0JBSzNELE1BQU9PLENBQUFBLE9BQVAsQ0FDRCxDQU5ELEMsd0JBUUFDLE9BQU8sQ0FBQ0MsV0FBUixDQUF1QmQsS0FBRCxFQUFXLGdEQUM3QixNQUFPZSxDQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxDQUFDaEIsS0FBSyxDQUFFQSxLQUFSLENBQVYsQ0FBUCxDQUNILENBRkQsQyx3QkFLQWlCLE1BQU0sQ0FBQ0osT0FBUCxDQUFlRSxJQUFmLENBQXNCckIsUUFBUSxDQUFDd0IsS0FBVCxDQUFlLE9BQWYsQ0FBd0JuQixVQUF4QixDQUF0QiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xuY29uc3QgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0Jyk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IFNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTtcblxuXG5jb25zdCBVc2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGVtYWlsIDoge1xuICAgIHR5cGUgOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQgOiB0cnVlLFxuICAgIHVuaXF1ZSA6IHRydWVcbiAgfSxcbiAgcGFzc3dvcmQgOiB7XG4gICAgdHlwZSA6IFN0cmluZyxcbiAgICByZXF1aXJlZCA6IHRydWVcbiAgfVxufSk7XG5cblxuXG5Vc2VyU2NoZW1hLnByZSgnc2F2ZScsIGFzeW5jIGZ1bmN0aW9uKG5leHQpe1xuICAvLyd0aGlzJyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQgYWJvdXQgdG8gYmUgc2F2ZWRcbiAgY29uc3QgdXNlciA9IHRoaXM7XG4gIC8vSGFzaCB0aGUgcGFzc3dvcmQgd2l0aCBhIHNhbHQgcm91bmQgb2YgMTAsIHRoZSBoaWdoZXIgdGhlIHJvdW5kcyB0aGUgbW9yZSBzZWN1cmUsIGJ1dCB0aGUgc2xvd2VyXG4gIC8veW91ciBhcHBsaWNhdGlvbiBiZWNvbWVzLlxuICBjb25zdCBoYXNoID0gYXdhaXQgYmNyeXB0Lmhhc2godGhpcy5wYXNzd29yZCwgMTApO1xuICAvL1JlcGxhY2UgdGhlIHBsYWluIHRleHQgcGFzc3dvcmQgd2l0aCB0aGUgaGFzaCBhbmQgdGhlbiBzdG9yZSBpdFxuICB0aGlzLnBhc3N3b3JkID0gaGFzaDtcbiAgLy9JbmRpY2F0ZXMgd2UncmUgZG9uZSBhbmQgbW92ZXMgb24gdG8gdGhlIG5leHQgbWlkZGxld2FyZVxuICBuZXh0KCk7XG5cbiAgbmV4dCgpO1xufSk7XG5cblVzZXJTY2hlbWEubWV0aG9kcy5pc1ZhbGlkUGFzc3dvcmQgPSBhc3luYyBmdW5jdGlvbihwYXNzd29yZCl7XG4gIGNvbnN0IHVzZXIgPSB0aGlzO1xuICAvL0hhc2hlcyB0aGUgcGFzc3dvcmQgc2VudCBieSB0aGUgdXNlciBmb3IgbG9naW4gYW5kIGNoZWNrcyBpZiB0aGUgaGFzaGVkIHBhc3N3b3JkIHN0b3JlZCBpbiB0aGVcbiAgLy9kYXRhYmFzZSBtYXRjaGVzIHRoZSBvbmUgc2VudC4gUmV0dXJucyB0cnVlIGlmIGl0IGRvZXMgZWxzZSBmYWxzZS5cbiAgY29uc3QgY29tcGFyZSA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgcmV0dXJuIGNvbXBhcmU7XG59XG5cbmV4cG9ydHMuZmluZEJ5RW1haWwgPSAoZW1haWwpID0+IHtcbiAgICByZXR1cm4gVXNlci5maW5kKHtlbWFpbDogZW1haWx9KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMuVXNlciA9IG1vbmdvb3NlLm1vZGVsKFwiVXNlcnNcIiwgVXNlclNjaGVtYSk7XG4iXX0=