function cov_esq5vp4e8(){var path="/Users/dominikfaber/Development/repos/domnode1/controllers/users.controller.js";var hash="ef0048ae0a381d4af7e836cad17f40907a64e9f0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/dominikfaber/Development/repos/domnode1/controllers/users.controller.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:49}},"1":{start:{line:3,column:0},end:{line:14,column:2}},"2":{start:{line:4,column:13},end:{line:4,column:31}},"3":{start:{line:5,column:2},end:{line:13,column:3}},"4":{start:{line:6,column:6},end:{line:6,column:24}},"5":{start:{line:7,column:6},end:{line:7,column:30}},"6":{start:{line:8,column:6},end:{line:8,column:20}},"7":{start:{line:11,column:4},end:{line:11,column:20}},"8":{start:{line:12,column:4},end:{line:12,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:43},end:{line:14,column:1}},line:3}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ef0048ae0a381d4af7e836cad17f40907a64e9f0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_esq5vp4e8=function(){return actualCoverage;};return actualCoverage;}cov_esq5vp4e8();const{User}=(cov_esq5vp4e8().s[0]++,require('../models/users.model'));cov_esq5vp4e8().s[1]++;exports.insert=async(req,res,next)=>{cov_esq5vp4e8().f[0]++;let user=(cov_esq5vp4e8().s[2]++,new User(req.body));cov_esq5vp4e8().s[3]++;try{cov_esq5vp4e8().s[4]++;await user.save();cov_esq5vp4e8().s[5]++;req.body._id=user._id;cov_esq5vp4e8().s[6]++;return next();}catch(err){cov_esq5vp4e8().s[7]++;res.status(400);cov_esq5vp4e8().s[8]++;res.send({errormessage:err.errmsg});}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiVXNlciIsInJlcXVpcmUiLCJleHBvcnRzIiwiaW5zZXJ0IiwicmVxIiwicmVzIiwibmV4dCIsInVzZXIiLCJib2R5Iiwic2F2ZSIsIl9pZCIsImVyciIsInN0YXR1cyIsInNlbmQiLCJlcnJvcm1lc3NhZ2UiLCJlcnJtc2ciXSwibWFwcGluZ3MiOiI0NENBQUEsS0FBTSxDQUFFQSxJQUFGLDBCQUFXQyxPQUFPLENBQUMsdUJBQUQsQ0FBbEIsQ0FBTixDLHVCQUVBQyxPQUFPLENBQUNDLE1BQVIsQ0FBaUIsTUFBT0MsR0FBUCxDQUFZQyxHQUFaLENBQWlCQyxJQUFqQixHQUEwQix3QkFDekMsR0FBSUMsQ0FBQUEsSUFBSSx5QkFBRyxHQUFJUCxDQUFBQSxJQUFKLENBQVNJLEdBQUcsQ0FBQ0ksSUFBYixDQUFILENBQVIsQ0FEeUMsdUJBRXpDLEdBQUksd0JBQ0EsS0FBTUQsQ0FBQUEsSUFBSSxDQUFDRSxJQUFMLEVBQU4sQ0FEQSx1QkFFQUwsR0FBRyxDQUFDSSxJQUFKLENBQVNFLEdBQVQsQ0FBZUgsSUFBSSxDQUFDRyxHQUFwQixDQUZBLHVCQUdBLE1BQU9KLENBQUFBLElBQUksRUFBWCxDQUVILENBQUMsTUFBTUssR0FBTixDQUFXLHdCQUNYTixHQUFHLENBQUNPLE1BQUosQ0FBVyxHQUFYLEVBRFcsdUJBRVhQLEdBQUcsQ0FBQ1EsSUFBSixDQUFTLENBQUNDLFlBQVksQ0FBR0gsR0FBRyxDQUFDSSxNQUFwQixDQUFULEVBQ0QsQ0FDRixDQVhEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBVc2VyIH0gPSByZXF1aXJlKCcuLi9tb2RlbHMvdXNlcnMubW9kZWwnKTtcblxuZXhwb3J0cy5pbnNlcnQgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgbGV0IHVzZXIgPSBuZXcgVXNlcihyZXEuYm9keSk7XG4gIHRyeSB7XG4gICAgICBhd2FpdCB1c2VyLnNhdmUoKTtcbiAgICAgIHJlcS5ib2R5Ll9pZCA9IHVzZXIuX2lkO1xuICAgICAgcmV0dXJuIG5leHQoKTtcblxuICB9IGNhdGNoKGVycikge1xuICAgIHJlcy5zdGF0dXMoNDAwKTtcbiAgICByZXMuc2VuZCh7ZXJyb3JtZXNzYWdlIDogZXJyLmVycm1zZ30pO1xuICB9XG59O1xuIl19